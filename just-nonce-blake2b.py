"""
roll/update
According to https://github.com/digitalbazaar/equihash/search?q=SEED_LENGTH
The block_header is 16*32 = 512 = 4*128
and nonce is 32 and the leading numbers are also 32.

Therefore just one roll (final roll) is needed in blake2b-test. Btw, 32+32=64 which is <128 and therefore leading zeroes are generated by the blake2b algorithm

no F
SEED_length of 16 out of 128
16+1(nonce)+1(number) = 18 < 128

Just one roll then

"""
from utils import G,sigma,iv
import numpy as np

nonce = 0xff # assumption



buffer = np.zeros((128,),dtype=np.uint32)



def processblock(m):
	# v[:8] = 0
	v = np.zeros(16,dtype=np.uint64)
	# v[8:16] = iv
	v[8:16]=iv
	
	v[12-8]^=np.array([18])
	v[14]=~v[14]
	print(v)
	for i in range(12):
		G(v,0, 4, 8,  12, m[sigma[i][0]], m[sigma[i][1]]);
		G(v,1, 5, 9,  13, m[sigma[i][2]], m[sigma[i][3]]);
		G(v,2, 6, 10, 14, m[sigma[i][4]], m[sigma[i][5]]);
		G(v,3, 7, 11, 15, m[sigma[i][6]], m[sigma[i][7]]);

		G(v,0, 5, 10, 15, m[sigma[i][8]],  m[sigma[i][9]]);
		G(v,1, 6, 11, 12, m[sigma[i][10]], m[sigma[i][11]]);
		G(v,2, 7, 8,  13, m[sigma[i][12]], m[sigma[i][13]]);
		G(v,3, 4, 9,  14, m[sigma[i][14]], m[sigma[i][15]]);
	print(v)
	print("done")

def hash_block(l,nonce):
	m = np.zeros((16,), np.uint64)
	m[:2]=0xfffff
	for num in l:
		m[2]=((num<<8)+nonce)
		processblock(m)
		break





Ns = [1,2,3,4,5,6]
hash_block(Ns,1)